######## diameter of Binary tree ########
-> definition
    diameter of tree is the longest path between any two node in tree
    this path does not need to pass from root

    Example 

        1
       / \
      2   3
     / \
    4   5

    so  4->2 = 1 or 5->2 = 1
        2->1 = 1 + 1 = 2
        1->3 = 1 + 1 + 1 = 3 
        so diameter is 3

        1
       / \
      2   3
         / \
        4   7
       /     \
      5       8
     /         \
    6           9

    so 6->5->4->3->7->8->9 = diameter = 6

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxdiameter = 0;
    int height(TreeNode* node){
        if(node == NULL){
            return 0;
        }
        int left = height(node->left);
        int right = height(node->right);
        maxdiameter = max(maxdiameter, left + right);
        return 1 + max(left, right);
    }
    int diameterOfBinaryTree(TreeNode* root) {
        height(root);
        return maxdiameter;
    }
};


####### Maximum Path sum ########

->  
Maximum path is the path in BT where to total of all values of node is Maximum
    this path may or may not inculed root

            -10
            /  \
           9    20
               /  \
              7   15 

    Maximum path sum will be 7->20->15 7+20+15 = 42
    

    logic is that we know how to calcuate hight of the tree 1 + max(leftSubTree, rigthSubTree)
    we can modify this logic like this node->val + max(leftSubTree, leftSubTree);
    node->val + max(leftSubTree, leftSubTree)-------> this will give the lets assume we calculate for node 9
    we will get node->val = 9 so leftSubTree = rigthSubTree = 0;  because left and right of node 9 is point to nullptr
    so,     
                node->val + max(leftSubTree, leftSubTree)
              = 9 + max(0, 0);
              = 9
    it will retrn left of -10 node as 9 

    this is the code

    int calculatePathOfNode(TreeNode* node, int& maxPath){
        if(node == 0) return 0;

        int left = max(0, calculatePathOfNode(node->left, maxPath));
        int right = max(0, calculatePathOfNode(node->right, maxPath));

        maxPath = max(maxPath, left + right + node->val);
        return node->val + max(left, right);
    }

    int maxPathSum(TreeNode* root){
        int maxPath = INT_MIN;
        calculatePathOfNode(root, maxPath);
        return maxPath;
    } 

    int left = max(0, calculatePathOfNode(node->left, maxPath));
    int right = max(0, calculatePathOfNode(node->right, maxPath));
    this line will make sure that is left path or right path have negative it will ignore it directly
    as negative value will never be considered in max path

             10
            /  \
           9    20
               /  \
              7   -15 

    now node 20 right is -15 so 
    the line will be 
    int right = max(0, calculatePathOfNode(node->right, maxPath)); // function is running for node 20
    int right = max(0, -15); // function is running for node 20
    int right  = 0;
    now as right become zero left = max(0, 7) = 7;
    node->val = 20
    node->val + max(left, right);
    = 20 + max(7, 0);
    = 20 + 7
    = 27
    so right path will get ignored and only left part is considered

    why we are using this instead of maxPath = 0;
    int maxPath = INT_MIN;

    what if the tree is give like this only one node
                -3
    even thought its an negative value but it will be the maxpath sum
    now if we defne maxPath = 0
    this line will be like
    maxPath = max(maxPath, left + right + node->val);
    maxPath = max(0, -3);
    so it will reutrn zero which is wrong

    so with defined  maxPath = INT_MIN as any negative numeber whos absolute value is less than the absoulte or INT_MIN
    will always be greater than INT_MIN value

    INT_MIN value is =  -2147483648.
    so the node value is not greater than  -2147483648. this value then the node value will be greater


###### Boundary Traversal #######

    Boundary Traversal means visiting all the Boundary node of a BT

    Example:

                1
               / \
              2   3
             / \ / \
            4  5 6  7

    so Boundary Traversal will be 1->2->4->5->6->7->3->1 or 1->3->7->6->5->4->2->1


    logic:

    ->getting the left Boundary excluding the leaf nodes
    ->then get he leaf nodes
    ->then get the right Boundary in reverse excluding the leaf nodes

    logic implementation brute force:

    void gettingLeft(TreeNode* node, vector<int>& v){
        while(node){
            if(node->left || node->right) v.push_back(node->val);
            if(node->left) node = node->left;
            else node = node->right;
        }
    }

    void gettingLeaf(TreeNode* node, vector<int>& v){
        if(node == NULL) return;
        if(node->left == NULL && node->right == NULL){
            v.push_back(node->val);
            return;
        } 
        gettingLeaf(node->left, v);
        gettingLeaf(node->right, v);
    }

    void gettingRight(TreeNode* node, vector<int>& v){
        vector<int> temp;
        while(node){
            if(node->left || node->right) temp.push_back(node->val);
            if(node->right) node = node->right;
            else node = node->left;
        }
        reverse(temp.begin(), temp.end());
        v.insert(v.end(),temp.begin(), temp.end());
    }

    vector<int> boundary(TreeNode* root){
        vector<int> ans;
        if(root == NULL){
            return ans;
        }
        if (!(root->left == NULL && root->right == NULL))
            ans.push_back(root->val);

        gettingLeft(root->left, ans);
        gettingLeaf(root, ans);
        gettingRight(root->right, ans );

        return ans;
    }
    

    logic implementation using DS:

    first we need to get a DS that stores all node
    now we will push the root of the tree in that DS
    now we will go left of the the BT

    now we will check 
        if(node->left || node -> right) v.push_back(node->val);
    if any exist push the current node value in DS

    now as we are doing it for left we will check first
        if(node->left)
            node= node->left;
        else 
            node = node->rigth; 
    if left exist go to left or else go to right
    until we get 
        node->left == NULL && node->rigth == NULL (condition for leaf node)
    as soon as node meet the above condition stop the left boundary Traversal without pushing current node

    now to get the leaf nodes we need to do inorder Traversal(root left right) 
    for all the nodes in BT and find which nodes are leaf nodes and push them in DS;

    now for right boundary in reverse we will start from the right of node 
    we will initialize another DS as DS2
    we will push all right boundary node in DS2
    now we will check
        if(node->left || node -> right) DS2.push_back(node->val);
    if any exist push the current node in DS2

    now as we are doing it for right we will check first
        if(node->right)
            node= node->right;
        else 
            node = node->leaf; 
    if right exist go to right or else go to left
    until we get 
        node->left == NULL && node->rigth == NULL (condition for leaf node)
    as soon as node meet the above condition stop the left boundary Traversal without pushing current nod

    now reverse the DS2 and push all elements of DS2 in DS form back side 



########## Symmetrical BT ###################

    A BT is Symmetrical if it forms a mirror of itself around the center 

    Example:

                 1
               /   \
              2     2
             / \   / \
            3   4 4   3

        logic doing both side differently
        find preorder or root->left as root (do root left right)
        find preorder or root->right as root (do root right left)
        
        check if both out are same id same tree is Symmetrical

        logic doing both side simaltanously 
        wrtie a function which takes 2 params as input 1)root->left as left 2) root->right as right
        now if( left == NULL and right == NULL) return left == right;
        if(left->val != right->val) return false;
        return function(left->left, right->right) && function(left->right, right->left);

####### Path from root to node ###########

    TODO:

####### Lowest Commom ancestor ###########

    the Lowest Commom ancestor is defined between nodes p and q as the Lowest node T that has
    both p and q as decendants. where we allow a node to be decendant or itself

    Example:
                       1
                     /   \
                    2     3
                   / \   / \
                  4   5 8   9
                     / \
                    6   7
        logic 1: 
        ->  Space Complexity Analysis:
                -> Path Vectors (pPath and qPath):
                    path from the root to a leaf can be of length H, where H = height of the tree.
                    So, each vector can store up to H TreeNode* pointers.
                    Total space for both vectors: O(H) + O(H) = O(H)

                -> Recursive Call Stack (from findPath function):
                    Since it is a depth-first traversal, the recursion stack can also grow up to H in the worst case.
                    Stack space: O(H)

        -> Final Total space for both vectors: 
                O(H) + O(H) = O(H)
                it has SC = O(H) H is height of BT
                    For a balanced tree: H = log N
                    For a skewed tree: H = N
            
        -> So in the worst case, space complexity is O(N).

            So,
            lca(4, 7) 

            find root to node path of for node 4 and for 7 store that path in a DS.

            run a for loop on the vectors and check if the vector  have same lowest decendant if they have it
            will be their LCA 

            4's path is -> [1, 2, 4] 
            (decendant is counted from left to right and hightest decendant(1) ot lowest decendant(4) )
            7's path is -> [1, 2, 5, 7]
            (decendant is counted from left to right and hightest decendant(1) ot lowest decendant(7) )

            as we can see the lowest decendant is 2. so LCA will be 2.

            code:

                bool findPath(TreeNode* node, vector<TreeNode*>& v, TreeNode* target){
                    if(node == NULL) return false;
                    v.push_back(node);
                    if(node->val == target->val) return true;
                    if(findPath(node->left, v, target) || findPath(node->right, v,target)){
                        return true;
                    }
                    v.pop_back();
                    return false;
                }
                TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
                    vector<TreeNode*> pPath, qPath;
                    findPath(root, pPath, p);
                    findPath(root, qPath, q);
                    int minLen = min(pPath.size(), qPath.size());
                    TreeNode* lca = nullptr;
                    for(int i = 0; i < minLen; i++){
                        if(pPath[i] == qPath[i]){
                            lca = pPath[i];
                        } else {
                            break;
                        }
                    }
                    return lca;
                }
        
        logic 2: 
        TreeNode* lowestCommonAncestor2(TreeNode* root, TreeNode* p, TreeNode* q) {
            if(root == NULL || root == p || root == q) return root;
            
            TreeNode*  left = lowestCommonAncestor2(root->left, p, q);
            TreeNode*  right = lowestCommonAncestor2(root->right, p, q);
            
            if(left != NULL && right != NULL) return root;

            return left != NULL ? left : right;
        }

        start with root check if root == NULL || root == p || root == q if it is return root 
        
        go left and check if(root == NULL || root == p || root == q) return root if any is true return root 
         
        go right and check if(root == NULL || root == p || root == q) return root if any is ture return root

        now check if if(left != NULL && right != NULL) return root;

        else return left or right on the basis of the wheather the left is null or right is null

        the thing will happen is that 

        ->  if a node return left = null and right = null then we can say sub tree of that node as root 
            does not have p and q nodes
        ->  if a node return left = null and right = some_value or left = some_value or right = null
            the now which returned some_value will be the p or q and that will be return;
        ->  if a node return left = some_value and right = some_value that means that node is LCA
        

############## Children Sum Property ##########

    Children sum Property states that the sum of  values of their Children should be equal to parents value

                200
                /  \
              100  100
              / \  / \
             50 50 50 50
    the above tree follows Children sum Property

    logic to make a tree follow Children sum Property

    come to root go to left child and then right take their value and add it 
    if their total value is greater then root value then assign Children's total value to root
    if their total is less then root value then assign root value to the left and right child

    when you reach leaf node on both left and right then after that add the values of left and right and assign
    that added value to the Children's root 

    why this logic works? it works because as we go down we are assignning the val that is als greater or equal the root 
    so that when afterwards when we go up adding left and right Childrens the addition will always be greater then their 
    root

    the code:
        void changeTree(TreeNode* root){
            if(root == NULL)return;
            int child = 0;
            if(root->left){
                child += root->left->val;
            }
            if(root->right){
                child += root->right->val;
            }
            if(child >= root->val) root->val = child;
            else{
                if(root->left) root->left->val = root->val;
                if(root->right) root->right->val = root->val;
            }

            changeTree(root->left);
            changeTree(root->right);

            int total = 0;
            if(root->left) total += root->left->val;
            if(root->right) total += root->right->val;
            if(root->left || root->right) root->val = total;
        }

##### Minimum Time to Burn a BT #######
    in this question it has been given a target node and root node of BT. we  have to fine the amount of time 
    taken to burn this binary tree.
    burning happens like this:
        -> a can be burned if its not burned
        -> you can only burn a node if its directly connected to the burned node
    
    Example:

            1
           / \
          2   3
         / \ / \
        4  5 6  7

        now target node is 2 so tree will start burning from the node 2 and first 1,4 and 5 will burn as they are directly
        connected to node 2 now 3 will burn and the 6  and 7 will Burn
        when we burn each directly connected node its one second that means when 1,4 and 5 got burned its was 1 second after
        when 3 got burned it was 2 seconds and when 6 and 7 got burned it was 3 second 
        it took 3 seconds to burn this binary tree.

        we will use one unordered_map<node, node> to keep parent track as we will need to go up in tree
        we will use one unordered_map<node, bool> to keep track if a node is burned or not
        we will use level-Order traversal BFS

        logic:
            void parentTrack(TreeNode* root, unordered_map<TreeNode*, TreeNode*> &parent_track){
                if(root == NULL) return;
                queue<TreeNode*> q;
                q.push(root);
                while(!q.empty()){
                    int size = q.size();
                    for(int i = 0; i < size; i++){
                        TreeNode* node = q.front();
                        q.pop();
                        if(node->left != NULL){
                            parent_track[node->left] = node;
                            q.push(node->left);
                        }
                        if(node->right != NULL){
                            parent_track[node->right] = node;
                            q.push(node->right);
                        }
                    }
                }
            }
            TreeNode* findNode(TreeNode* root, int target){
                if(root == NULL) return nullptr;
                if(root->val == target) return root;
                TreeNode* left = findNode(root->left, target);
                if(left) return left;
                TreeNode* right = findNode(root->right, target);
                if(right) return right;
                return nullptr;
            }

            int amountOfTime(TreeNode* root, int start) {
                unordered_map<TreeNode*, TreeNode*> parent_track;
                parentTrack(root, parent_track); 
                TreeNode* start_node = findNode(root, start);
                unordered_map<TreeNode*, bool> burned;
                queue<TreeNode*> q;
                q.push(start_node);
                burned[start_node] = true;
                int time = -1;
                while(!q.empty()){
                    int size = q.size();
                    time++;
                    for(int i = 0; i < size; i++){
                        TreeNode* node = q.front();
                        q.pop();
                        if(node->left && !burned[node->left]){
                            q.push(node->left);
                            burned[node->left] = true;
                        }
                        if(node->right && !burned[node->right]){
                            q.push(node->right);
                            burned[node->right] = true;
                        }
                        if(parent_track[node] && !burned[parent_track[node]]){
                            q.push(parent_track[node]);
                            burned[parent_track[node]] = true;
                        }
                    }
                }
                return time;
            }

#### Count Total Nodes in a complete binary tree ##############

    we will need to count number of node in BT

    brute force approch:
        use preorder, postorder, or inorder to count nodes.
    
    optimized approch:
        we need to find the nodes in complete binary tree 
        definition of complete binary tree is:

            ->  According to Wikipedia, every level, except possibly the last, is completely filled in a 
                complete binary tree, and all nodes in the last level are as far left as possible. It can have 
                between 1 and 2h nodes inclusive at the last level h.
        so we can use the Property of complete BT which is if from the root left leftTree height and rigthTree height
        is equal then we can find the its total nodes using formula

                2^h - 2

            where h is the height of the tree
            if the height of left tree and right is not same we can calcuate the nodes like 
                    1 + left + right 
            extra 1 is for the node 
        Example:

            1
           / \
          2   3
         / \ / \
        4  5 6  7

        see from root 1 left height is 3 and right height is also 3 so formula

            2^3 - 1 = 7
            there are 7 nodes in BT
    logic

        int countNodes(TreeNode* root) {
        if(root == NULL) return 0;

        int leftHeight = countLeftHeight(root);
        int rightHeight = countRightHeight(root);

        if(leftHeight == rightHeight) return (1<<leftHeight) - 1;

        return 1 + countNodes(root->left) + countNodes(root->right);
        }

        int countLeftHeight(TreeNode* node){
            int height = 0;
            while(node){
                height++;
                node = node->left;
            }
            return height;
        }

        int countRightHeight(TreeNode* node){
            int height = 0;
            while(node){
                height++;
                node = node->right;
            }
            return height;
        }

##### vertical Order traversal of binary tree ###########
    
    https://www.youtube.com/watch?v=q_a6lpbKJdw

#### construct a BT tree From preorder and inorder given ##########



    

